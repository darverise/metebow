# 检查配置文件变化的时间间隔
refresh_rate: 30 seconds

# 定义变量，方便复用
variables:
  # 日志格式模板
  basic_pattern: "{d(%Y-%m-%d %H:%M:%S%.3f)} [{l}] [{T}] {t} - {m}{n}"
  detailed_pattern: "{d(%Y-%m-%d %H:%M:%S%.3f)} [{l}] [{T}] [{f}:{L}] {t} - {m}{n}"
  # 存储路径
  log_dir: "logs"
  archive_dir: "target/logs"
  max_file_size: 100mb

# 所有的输出配置
appenders:
  # 控制台输出，用于开发环境
  console:
    kind: console
    encoder:
      # 使用详细格式，包含文件名和行号
      pattern: "${detailed_pattern}"
    filters:
      # 配置过滤器链
      - kind: threshold
        level: debug
      # 可以添加自定义过滤器，比如只显示特定模块的日志
      - kind: regex
        regex: "^(app|api)::"
        must_match: true

  # 应用主日志，记录 INFO 及以上级别
  app:
    kind: rolling_file
    path: "${log_dir}/app.log"
    encoder:
      pattern: "${basic_pattern}"
    policy:
      # 触发器配置：同时按大小和时间滚动
      trigger:
        kind: compound
        trigger:
          # 按大小滚动
          - kind: size
            limit: "${max_file_size}"
          # 按时间滚动（每天）
          - kind: time
            pattern: "0 0 0 * * ?"
      # 归档配置
      roller:
        kind: fixed_window
        pattern: "${archive_dir}/app.{}.log"
        base: 1
        count: 7
    filters:
      - kind: threshold
        level: info

  # 错误日志，单独记录ERROR级别
  error:
    kind: rolling_file
    path: "${log_dir}/error.log"
    encoder:
      pattern: "${detailed_pattern}"
    policy:
      trigger:
        kind: compound
        trigger:
          - kind: size
            limit: "${max_file_size}"
          - kind: time
            pattern: "0 0 0 * * ?"
      roller:
        kind: fixed_window
        pattern: "${archive_dir}/error.{}.log"
        base: 1
        count: 14  # 保留更长时间的错误日志
    filters:
      - kind: threshold
        level: error

  # 访问日志，记录HTTP请求（如果是Web服务）
  access:
    kind: rolling_file
    path: "${log_dir}/access.log"
    encoder:
      # 访问日志使用自定义格式
      pattern: "{d(%Y-%m-%d %H:%M:%S)} - {m}{n}"
    policy:
      trigger:
        kind: compound
        trigger:
          - kind: size
            limit: "${max_file_size}"
          - kind: time
            pattern: "0 0 0 * * ?"
      roller:
        kind: fixed_window
        pattern: "${archive_dir}/access.{}.log"
        base: 1
        count: 7

  # 性能监控日志
  metrics:
    kind: rolling_file
    path: "${log_dir}/metrics.log"
    encoder:
      kind: json  # 使用JSON格式便于后续分析
    policy:
      trigger:
        kind: time
        pattern: "0 0 * * * ?"  # 每小时归档
      roller:
        kind: fixed_window
        pattern: "${archive_dir}/metrics.{}.log"
        base: 1
        count: 24  # 保留24小时的监控数据

# 根日志记录器配置
root:
  level: info
  appenders:
    - console
    - app
    - error

# 特定模块的日志配置
loggers:
  # API模块使用INFO级别
  app::api:
    level: info
    appenders:
      - app
      - access
    additive: false  # 不继承root配置

  # 数据库操作使用DEBUG级别
  app::db:
    level: debug
    appenders:
      - app
    additive: true  # 继承root配置

  # 监控指标单独配置
  app::metrics:
    level: info
    appenders:
      - metrics
    additive: false

  # 第三方库的日志级别控制
  reqwest:
    level: warn
  tokio:
    level: warn
  hyper:
    level: warn